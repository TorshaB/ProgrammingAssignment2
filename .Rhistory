names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow nrow = 4, ncol = 5)
my_matrix2 <- matrix(c(1:20), nrow nrow = 4, ncol = 5)
my_matrix2 <- matrix(c(1:20), nrow = 4, ncol = 5)
my_matrix2
identical(my_matrix, my_matrix2)
c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix2)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE = TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 != 7
5 != 7
!(5==7)
FALSE & FALSE
TRUE & C(TRUE, FALSE, FALSE)
C(TRUE, FALSE, FALSE)
c(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>4.9
5 > 8 || 6 != 8 && 4 > 3.9
TRUE(6>4)
TRUE(6 > 4)
isTRUE(6 > 4)
identical("twins", "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints == 0)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4,5))
submit()
submit($)
submit()
submit(x)
submit()
submit()
?submit
submit()
submit()
submit()
submit()
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
submit()
submit()
View(evaluate)
submit()
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x),{x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1], c(8, 4, 0)})
evaluate(function(x){x[1]}, c(8, 4, 0)})
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("See", "You!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
mad_libs(place, adjective, noun)
mad_libs("place", "adjective", "noun")
submit()
function('I', 'love', 'R!')
function('I' %p% 'love' %p% 'R!')
function("I"%p% "love" %p% "R!")
function("I"%p% "love" %p% "R!")
%p%("I", "love", "R!")
"%p%"("I", "love", "R!")
"%p%"("I" %p% "love" %p% "R!")
"%p%"("I"%p%"love"%p%"R!")
"%p%"("I" %p% "love" %p% "R!")
info()
skip()
x<- 45
If(x>= 30){y<- x+1}
If(x>= 30){y<- x+1} else{y <- x-1}
If(x >= 30){y <- x+1} else{y <- x-1}
If(x >= 30) {y <- x+1} else {y <- x-1}
If(x >= 30) {                           y <- x+1} else {y <- x-1}
x <- 30
y <- if(x > 25) { 10 } ELSE { 0 }
y <- IF (x > 25) { 10 } ELSE { 0 }
print(y)
print(y)
x <- c("a", "b", "c", "d")
length(x)
for(i in 1: length(x)) { print(x[i])}
for(i in seq_along(x)) {print(x[i])}
y <- 3
Z <- ifelse( y >= 5) {7} {13}
Z <- if( y >= 5) {7} else {13}
print(Z)
x <- matrix(1:6, 2,3)
for(i in seq_len(nrow(x))) {for(j in seq_len(ncol(x))) {print(x[i,j])}}
x <- integer(length = 3)
Name <- "Balaji"
if(Name == "Balaji"){ print x == 3}
if(Name == "Balaji"){ x == 3}
}
getwd()
pollutantmean(/Users/TB/Downloads/specdata, "Nitrate", 1)
pollutantmean <- function(directory, pollutant, id = 1:332) {
filelist <- list.files(path = directory, path= ".csv", full.names = T)
values <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = T)
}
pollutantmean(/Users/TB/Downloads/specdata, "Nitrate")
pollutantmean(Users/TB/Downloads/specdata, "Nitrate")
pollutantmean("/Users/TB/Downloads/specdata", "Nitrate")
pollutantmean("/Users/TB/Downloads/specdata", "nitrate")
pollutantmean("/Users/TB/Downloads/specdata/", "nitrate")
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean("/Users/TB/Downloads/specdata", "sulfate")
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
filelist <- list.files(path = directory, path = ".csv", full.names = T)
values <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = T)
}
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
filelist <- list.files(path = directory, path = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
filelist <- list.files(path = directory, patern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
filelist <- list.files(path = directory, pattern = ".csv", full.names = TRUE)
values <- numeric()
for (i in id) {
data <- read.csv(filelist[i])
values <- c(values, data[[pollutant]])
}
mean(values, na.rm = TRUE)
}
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate")
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate", 2)
pollutantmean("/Users/TB/Downloads/specdata/", "sulfate", 2:10)
?list.files
library(datasets)
data(iris)
?iris
summary(iris)
data(mtcars)
summary(mtcars)
split(mtcars, mtcars$cyl)
s <- split(mtcars, mtcars$cyl)
sapply(s, function(x), colMeans(x[ ,"hp"],na.rm = TRUE))
sapply(s, function(x), colMeans(x[ ,c("hp")],na.rm = TRUE))
ei <- colMeans(s)
debug(ls)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x['8'] - x['4']
c
swirl()
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c()
?c
z
c(z, 555)
c(z, 555, z)
z*2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
getwd()
ls()
x <-9
ls()
list.files()
?list.files
args()
list.files(arg())
list.files(args())
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd(dir = "testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("mytest2.R", "mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'), recursive = TRUE )
setwd(old.dir)
del
dir.del('testdir')
remove('testdir')
unlink('testdir')
unlink('testdir',recursive = T)
unlink('testdir',recursive = TRUE)
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(1,10, by = 0.5)
seq(1,10, by=0.5)
seq(1, 10, by=0.5)
seq(0, 10, by=0.5)
seq(5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
num_vect<1
tf <- num_vect<1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Torsha")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c('X','Y','Z'), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(100)
y <- rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[3,5,7]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar= 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
my_matrix2
identical(my_matrix, my_matrix2)
patients <- c(Bill, Gina, Kelly, Sean)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix2)
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating","test")
colnames(my_data,cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5=7)
!(5==7)
FALSE & FALSE
TRUE & c(T, F, F)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
TRUE(6>4)
TRUE(6 > 4)
isTRUE(6>7)
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints)
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, divisor = 2)
args(remainder)
submit()
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste('programming', 'is', 'fun!')
paste('Programming', 'is', 'fun!')
submit()
telegram("lets meet!")
submit()
mad_libs(c(Kolkata, beautiful, rule))
mad_libs("kolkata", "beatutiful", "rule")
submit()
'Hello' %p% 'student!'
'Hello', %p% ,'student!'
%p%('Hello', 'student!')
"Hello", %p% ,"student!"
"Hello" %p% "student!"
submit()
"Hello" %p% "student!"
submit()
"Hello" %p% "student!"
"Hello" %p% "student" %p% "!"
"Hello" %p% "student!"
%p%
info()
play()
next()
nxt()
'I' %p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
a <-daig(5,3)
a <- diag(5,3)
a
cachedmatrix <- makecachematrix(a)
cachedmatrix <- makeCacheMatrix(a)
cachedmatrix <- MakeCacheMatrix(a)
cachedmatrix <- MakeCacheMatrix(a)
cachedMatrix <- MakeCacheMatrix(a)
cacheMatrix <- MakeCacheMatrix(a)
a <- diag(5,3)
a
cachedmatrix <- MakeCacheMatrix(a)
cachedmatrix <- MakeCacheMatrix(a)
a <- c(3,4,5)
a
mv <- MakeVector(a)
